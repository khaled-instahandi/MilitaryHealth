// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserRoles_UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Applicant", b =>
                {
                    b.Property<int>("ApplicantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantID"));

                    b.Property<decimal?>("BMI")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DistinctiveMarks")
                        .HasColumnType("text");

                    b.Property<string>("FileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Job")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("Pulse")
                        .HasColumnType("int");

                    b.Property<bool?>("Tattoo")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("ApplicantID")
                        .HasName("PK__Applican__39AE9148E8810501");

                    b.HasIndex("MaritalStatusID");

                    b.HasIndex(new[] { "FileNumber" }, "UQ__Applican__8BD00B71D756A649")
                        .IsUnique();

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Archive", b =>
                {
                    b.Property<int>("ArchiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArchiveID"));

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ApplicantID")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ArchiveDate")
                        .HasColumnType("date");

                    b.Property<string>("DigitalCopy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ArchiveID")
                        .HasName("PK__Archive__33A73E7702D57F28");

                    b.HasIndex("ApplicantID");

                    b.ToTable("Archive", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK__AspNetRo__3214EC07E0371F6E");

                    b.HasIndex(new[] { "NormalizedName" }, "IX_AspNetRoles_NormalizedName")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__AspNetRo__3214EC07CA93C2E6");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__AspNetUs__3214EC07EF4F5060");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ChangedColumns")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NewValues")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OldValues")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditId")
                        .HasName("PK__AuditLog__A17F2398AB6847B7");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationID"));

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConsultationType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("ReferredDoctor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.HasKey("ConsultationID")
                        .HasName("PK__Consulta__5D014A78B8B974D2");

                    b.HasIndex("DoctorID");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.ContractType", b =>
                {
                    b.Property<int>("ContractTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ContractTypeID")
                        .HasName("PK__Contract__68A6154545ADAD3C");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ContractTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SpecializationID")
                        .HasColumnType("int");

                    b.HasKey("DoctorID")
                        .HasName("PK__Doctors__2DC00EDF0F91A5A9");

                    b.HasIndex("ContractTypeID");

                    b.HasIndex("SpecializationID");

                    b.HasIndex(new[] { "Code" }, "IX_Doctors")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.EyeExam", b =>
                {
                    b.Property<int>("EyeExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EyeExamID"));

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ColorTest")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("OtherDiseases")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("RefractionTypeID")
                        .HasColumnType("int");

                    b.Property<decimal?>("RefractionValue")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("ResultID")
                        .HasColumnType("int");

                    b.Property<string>("Vision")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EyeExamID")
                        .HasName("PK__EyeExam__C99F26ADECA9F5D7");

                    b.HasIndex("DoctorID");

                    b.HasIndex("RefractionTypeID");

                    b.HasIndex("ResultID");

                    b.HasIndex(new[] { "ApplicantFileNumber" }, "IX_EyeExam")
                        .IsUnique();

                    b.ToTable("EyeExam", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.FinalDecision", b =>
                {
                    b.Property<int>("DecisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DecisionID"));

                    b.Property<int>("OrthopedicExamID")
                        .HasColumnType("int");

                    b.Property<int>("SurgicalExamID")
                        .HasColumnType("int");

                    b.Property<int>("InternalExamID")
                        .HasColumnType("int");

                    b.Property<int>("EyeExamID")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("DecisionDate")
                        .HasColumnType("date");

                    b.Property<string>("PostponeDuration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("ResultID")
                        .HasColumnType("int");

                    b.HasKey("DecisionID", "OrthopedicExamID", "SurgicalExamID", "InternalExamID", "EyeExamID")
                        .HasName("PK__FinalDec__C0F28966CDD395EE");

                    b.HasIndex("EyeExamID");

                    b.HasIndex("InternalExamID");

                    b.HasIndex("OrthopedicExamID");

                    b.HasIndex("ResultID");

                    b.HasIndex("SurgicalExamID");

                    b.HasIndex(new[] { "ApplicantFileNumber" }, "IX_FinalDecision");

                    b.ToTable("FinalDecision", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.InternalExam", b =>
                {
                    b.Property<int>("InternalExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternalExamID"));

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Blood")
                        .HasColumnType("text");

                    b.Property<string>("Digestive")
                        .HasColumnType("text");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Endocrine")
                        .HasColumnType("text");

                    b.Property<string>("Hearing")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Heart")
                        .HasColumnType("text");

                    b.Property<string>("Joints")
                        .HasColumnType("text");

                    b.Property<string>("Kidney")
                        .HasColumnType("text");

                    b.Property<string>("Neurology")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Respiratory")
                        .HasColumnType("text");

                    b.Property<int?>("ResultID")
                        .HasColumnType("int");

                    b.Property<string>("Skin")
                        .HasColumnType("text");

                    b.HasKey("InternalExamID")
                        .HasName("PK__Internal__E33A763CB54CBD2F");

                    b.HasIndex("DoctorID");

                    b.HasIndex("ResultID");

                    b.HasIndex(new[] { "ApplicantFileNumber" }, "IX_InternalExam")
                        .IsUnique();

                    b.ToTable("InternalExam", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Investigation", b =>
                {
                    b.Property<int>("InvestigationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestigationID"));

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("InvestigationID")
                        .HasName("PK__Investig__83714CD4B4BFB7A1");

                    b.HasIndex("DoctorID");

                    b.ToTable("Investigations");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaritalStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MaritalStatusID")
                        .HasName("PK__MaritalS__C8B1BA52E679DDF6");

                    b.ToTable("MaritalStatus", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.OrthopedicExam", b =>
                {
                    b.Property<int>("OrthopedicExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrthopedicExamID"));

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Musculoskeletal")
                        .HasColumnType("text");

                    b.Property<string>("NeurologicalSurgery")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("ResultID")
                        .HasColumnType("int");

                    b.HasKey("OrthopedicExamID")
                        .HasName("PK__Orthoped__FB01E23AF75139AD");

                    b.HasIndex("DoctorID");

                    b.HasIndex("ResultID");

                    b.HasIndex(new[] { "ApplicantFileNumber" }, "IX_OrthopedicExam")
                        .IsUnique();

                    b.ToTable("OrthopedicExam", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.RefractionType", b =>
                {
                    b.Property<int>("RefractionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefractionTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RefractionTypeID")
                        .HasName("PK__Refracti__75753A9CCE19D300");

                    b.ToTable("RefractionTypes");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ResultID")
                        .HasName("PK__Results__9769022815022F28");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Specialization", b =>
                {
                    b.Property<int>("SpecializationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecializationID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SpecializationID")
                        .HasName("PK__Speciali__5809D84F67128FD1");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.SurgicalExam", b =>
                {
                    b.Property<int>("SurgicalExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgicalExamID"));

                    b.Property<string>("ApplicantFileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("GeneralSurgery")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("ResultID")
                        .HasColumnType("int");

                    b.Property<string>("ThoracicSurgery")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UrinarySurgery")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VascularSurgery")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SurgicalExamID")
                        .HasName("PK__Surgical__847BC15AD83A82FE");

                    b.HasIndex("DoctorID");

                    b.HasIndex("ResultID");

                    b.HasIndex(new[] { "ApplicantFileNumber" }, "IX_SurgicalExam");

                    b.ToTable("SurgicalExam", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Permissions")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID")
                        .HasName("PK__Users__1788CCAC2F38B562");

                    b.HasIndex(new[] { "NormalizedEmail" }, "IX_Users_NormalizedEmail");

                    b.HasIndex(new[] { "NormalizedUserName" }, "IX_Users_NormalizedUserName")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E47EFD7CAF")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__UserRefr__3214EC074F2E5198");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Token" }, "IX_UserRefreshTokens_Token")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_Roles");

                    b.HasOne("Infrastructure.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_Users");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Applicant", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("Applicants")
                        .HasForeignKey("MaritalStatusID")
                        .HasConstraintName("FK__Applicant__Marit__45F365D3");

                    b.Navigation("MaritalStatus");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Archive", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Applicant", "Applicant")
                        .WithMany("Archives")
                        .HasForeignKey("ApplicantID")
                        .HasConstraintName("FK__Archive__Applica__6A30C649");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.User", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.User", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.User", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Consultation", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Doctor", "Doctor")
                        .WithMany("Consultations")
                        .HasForeignKey("DoctorID")
                        .HasConstraintName("FK_Consultations_Doctors");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Doctor", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.ContractType", "ContractType")
                        .WithMany("Doctors")
                        .HasForeignKey("ContractTypeID")
                        .HasConstraintName("FK__Doctors__Contrac__3E52440B");

                    b.HasOne("Infrastructure.Persistence.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationID")
                        .HasConstraintName("FK__Doctors__Special__3D5E1FD2");

                    b.Navigation("ContractType");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.EyeExam", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Doctor", "Doctor")
                        .WithMany("EyeExams")
                        .HasForeignKey("DoctorID")
                        .HasConstraintName("FK_EyeExam_Doctors");

                    b.HasOne("Infrastructure.Persistence.Models.RefractionType", "RefractionType")
                        .WithMany("EyeExams")
                        .HasForeignKey("RefractionTypeID")
                        .HasConstraintName("FK__EyeExam__Refract__4E88ABD4");

                    b.HasOne("Infrastructure.Persistence.Models.Result", "Result")
                        .WithMany("EyeExams")
                        .HasForeignKey("ResultID")
                        .HasConstraintName("FK__EyeExam__ResultI__4F7CD00D");

                    b.Navigation("Doctor");

                    b.Navigation("RefractionType");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.FinalDecision", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.EyeExam", "EyeExam")
                        .WithMany("FinalDecisions")
                        .HasForeignKey("EyeExamID")
                        .IsRequired()
                        .HasConstraintName("FK_FinalDecision_EyeExam");

                    b.HasOne("Infrastructure.Persistence.Models.InternalExam", "InternalExam")
                        .WithMany("FinalDecisions")
                        .HasForeignKey("InternalExamID")
                        .IsRequired()
                        .HasConstraintName("FK_FinalDecision_InternalExam");

                    b.HasOne("Infrastructure.Persistence.Models.OrthopedicExam", "OrthopedicExam")
                        .WithMany("FinalDecisions")
                        .HasForeignKey("OrthopedicExamID")
                        .IsRequired()
                        .HasConstraintName("FK_FinalDecision_OrthopedicExam");

                    b.HasOne("Infrastructure.Persistence.Models.Result", "Result")
                        .WithMany("FinalDecisions")
                        .HasForeignKey("ResultID")
                        .HasConstraintName("FK__FinalDeci__Resul__6754599E");

                    b.HasOne("Infrastructure.Persistence.Models.SurgicalExam", "SurgicalExam")
                        .WithMany("FinalDecisions")
                        .HasForeignKey("SurgicalExamID")
                        .IsRequired()
                        .HasConstraintName("FK_FinalDecision_SurgicalExam");

                    b.Navigation("EyeExam");

                    b.Navigation("InternalExam");

                    b.Navigation("OrthopedicExam");

                    b.Navigation("Result");

                    b.Navigation("SurgicalExam");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.InternalExam", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Doctor", "Doctor")
                        .WithMany("InternalExams")
                        .HasForeignKey("DoctorID")
                        .HasConstraintName("FK_InternalExam_Doctors");

                    b.HasOne("Infrastructure.Persistence.Models.Result", "Result")
                        .WithMany("InternalExams")
                        .HasForeignKey("ResultID")
                        .HasConstraintName("FK__InternalE__Resul__5441852A");

                    b.Navigation("Doctor");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Investigation", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Doctor", "Doctor")
                        .WithMany("Investigations")
                        .HasForeignKey("DoctorID")
                        .IsRequired()
                        .HasConstraintName("FK_Investigations_Doctors");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.OrthopedicExam", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Doctor", "Doctor")
                        .WithMany("OrthopedicExams")
                        .HasForeignKey("DoctorID")
                        .HasConstraintName("FK_OrthopedicExam_Doctors");

                    b.HasOne("Infrastructure.Persistence.Models.Result", "Result")
                        .WithMany("OrthopedicExams")
                        .HasForeignKey("ResultID")
                        .HasConstraintName("FK__Orthopedi__Resul__5DCAEF64");

                    b.Navigation("Doctor");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.SurgicalExam", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.Doctor", "Doctor")
                        .WithMany("SurgicalExams")
                        .HasForeignKey("DoctorID")
                        .HasConstraintName("FK_SurgicalExam_Doctors");

                    b.HasOne("Infrastructure.Persistence.Models.Result", "Result")
                        .WithMany("SurgicalExams")
                        .HasForeignKey("ResultID")
                        .HasConstraintName("FK__SurgicalE__Resul__59063A47");

                    b.Navigation("Doctor");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.UserRefreshToken", b =>
                {
                    b.HasOne("Infrastructure.Persistence.Models.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRefreshTokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Applicant", b =>
                {
                    b.Navigation("Archives");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.ContractType", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Doctor", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("EyeExams");

                    b.Navigation("InternalExams");

                    b.Navigation("Investigations");

                    b.Navigation("OrthopedicExams");

                    b.Navigation("SurgicalExams");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.EyeExam", b =>
                {
                    b.Navigation("FinalDecisions");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.InternalExam", b =>
                {
                    b.Navigation("FinalDecisions");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.MaritalStatus", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.OrthopedicExam", b =>
                {
                    b.Navigation("FinalDecisions");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.RefractionType", b =>
                {
                    b.Navigation("EyeExams");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Result", b =>
                {
                    b.Navigation("EyeExams");

                    b.Navigation("FinalDecisions");

                    b.Navigation("InternalExams");

                    b.Navigation("OrthopedicExams");

                    b.Navigation("SurgicalExams");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.SurgicalExam", b =>
                {
                    b.Navigation("FinalDecisions");
                });

            modelBuilder.Entity("Infrastructure.Persistence.Models.User", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("UserRefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
